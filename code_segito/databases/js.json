{ "name": "Szín class", "desc": "list, rgb, dict, string", "tartalom": "Kell hozzá a 'Matek class'", "tags": [], "code": "class szin {<br>    constructor (r = 0, g = 0, b = 0) {<br>        this.r = r;<br>        this.g = g;<br>        this.b = b;<br>    }<br>    set(r, g, b) {<br>        this.r = r;<br>        this.g = g;<br>        this.b = b;<br>    }<br>    random() {<br>        this.r = matek.randInt(0, 255);<br>        this.g = matek.randInt(0, 255);<br>        this.b = matek.randInt(0, 255);<br>    }<br>    load(str="") {<br>        if (typeof(str) == "object") {  // Dictionary | List<br>            try {<br>                if (!str[0]) throw Error;<br>                this.fromList(str);<br>            } catch {<br>                this.fromDict(str);<br>            }<br>        } else if (str.includes("rgb")) {  // RGB<br>            this.fromRGB(str);<br>        } else if (str.includes(":")) {  // String<br>            this.fromString(str);<br>        }<br>    }<br>    toString() {<br>        return `R: ${this.r}, G: ${this.g}, B: ${this.b}`;<br>    }<br>    toList() {<br>        return [this.r, this.g, this.b];<br>    }<br>    toDict() {<br>        return {"r": this.r, "g": this.g, "b": this.b};<br>    }<br>    toRGB() {<br>        return  `rgb(${this.r}, ${this.g}, ${this.b})`;<br>    }<br>    fromRGB(rgb) {<br>        rgb = rgb.replace("rgb(", "").replace(")", "").split(", ");<br>        this.r = rgb[0];<br>        this.g = rgb[1];<br>        this.b = rgb[2];<br>    }<br>    <br>    fromString(str) {<br>        str = str.replace("R: ", "").replace("G: ", "").replace("B: ", "").split(", ");<br>        this.r = str[0];<br>        this.g = str[1];<br>        this.b = str[2];<br>    }<br>    fromList(lista) {<br>        this.r = lista[0];<br>        this.g = lista[1];<br>        this.b = lista[2];<br>    }<br>    <br>    fromDict(dict) {<br>        this.r = dict["r"];<br>        this.g = dict["g"];<br>        this.b = dict["b"];<br>    }<br>    isSimilarColor(rgb, c=50) {<br>        let obj = new szin();<br>        obj.load(rgb);<br>        rgb = obj.toRGB();<br>        let _rgb = this.toRGB();<br>        let similar = new szin();<br>        if (_rgb == rgb)<br>            return true;<br>        similar.fromRGB(rgb);<br>        similar = similar.toList();<br>        _rgb = this.toList();<br>        if (similar[0] - _rgb[0] <= c && similar[0] - _rgb[0] > 0 || _rgb[0] - similar[0] <= c && _rgb[0] - similar[0] > 0 &&<br>            similar[1] - _rgb[1] <= c && similar[1] - _rgb[1] > 0 || _rgb[1] - similar[1] <= c && _rgb[1] - similar[1] > 0 &&<br>            similar[2] - _rgb[2] <= c && similar[2] - _rgb[2] > 0 || _rgb[2] - similar[2] <= c && _rgb[2] - similar[2] > 0<br>        )<br>            return true;<br>        return false;<br>    }<br>    getSimilarity(rgb) {<br>        let obj = new szin();<br>        obj.load(rgb);<br>        rgb = obj.toList();<br>        let _rgb = this.toList();<br>        let sim = [];<br>        sim.push(rgb[0] - _rgb[0] < 0 ? rgb[0] / _rgb[0] * 100 : _rgb[0] / rgb[0] * 100);<br>        sim.push(rgb[1] - _rgb[1] < 0 ? rgb[1] / _rgb[0] * 100 : _rgb[1] / rgb[1] * 100);<br>        sim.push(rgb[2] - _rgb[2] < 0 ? rgb[2] / _rgb[0] * 100 : _rgb[2] / rgb[2] * 100);<br>        return matek.tryToConvertToInt(matek.avarage(sim, 2));<br>    }<br>    getList(str="") {<br>        let obj = new szin();<br>        obj.load(str);<br>        return obj.toList();<br>    }<br>    getDict(str="") {<br>        let obj = new szin();<br>        obj.load(str);<br>        return obj.toDict();<br>    }<br>    getRGB(str="") {<br>        let obj = new szin();<br>        obj.load(str);<br>        return obj.toRGB();<br>    }<br>    getString(str="") {<br>        let obj = new szin();<br>        obj.load(str);<br>        return obj.toString();<br>    }<br>}" }
{ "name": "", "desc": "", "tartalom": "", "tags": [], "code": "" }
